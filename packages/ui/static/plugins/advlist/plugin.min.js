/**
 * Copyright (c) Tiny Technologies, Inc. All rights reserved.
 * Licensed under the LGPL or a commercial license.
 * For LGPL see License.txt in the project root for license information.
 * For commercial licenses see https://www.tiny.cloud/
 *
 * Version: 5.1.6 (2020-01-28)
 */
!(function() {
    function n() {}
    function o(n) {
        return function() {
            return n;
        };
    }
    function t() {
        return d;
    }
    let e;
    const r = tinymce.util.Tools.resolve('tinymce.PluginManager');
    const u = tinymce.util.Tools.resolve('tinymce.util.Tools');
    const l = function(n, t, e) {
        const r = t === 'UL' ? 'InsertUnorderedList' : 'InsertOrderedList';
        n.execCommand(r, !1, !1 === e ? null : { 'list-style-type': e });
    };
    const i = function(e) {
        e.addCommand('ApplyUnorderedListStyle', function(n, t) {
            l(e, 'UL', t['list-style-type']);
        }),
            e.addCommand('ApplyOrderedListStyle', function(n, t) {
                l(e, 'OL', t['list-style-type']);
            });
    };
    const c = function(n) {
        const t = n.getParam(
            'advlist_number_styles',
            'default,lower-alpha,lower-greek,lower-roman,upper-alpha,upper-roman',
        );
        return t ? t.split(/[ ,]/) : [];
    };
    const s = function(n) {
        const t = n.getParam('advlist_bullet_styles', 'default,circle,square');
        return t ? t.split(/[ ,]/) : [];
    };
    const f = o(!1);
    const a = o(!0);
    var d =
        ((e = {
            fold(n, t) {
                return n();
            },
            is: f,
            isSome: f,
            isNone: a,
            getOr: m,
            getOrThunk: p,
            getOrDie(n) {
                throw new Error(n || 'error: getOrDie called on none.');
            },
            getOrNull: o(null),
            getOrUndefined: o(undefined),
            or: m,
            orThunk: p,
            map: t,
            each: n,
            bind: t,
            exists: f,
            forall: a,
            filter: t,
            equals: g,
            equals_: g,
            toArray() {
                return [];
            },
            toString: o('none()'),
        }),
        Object.freeze && Object.freeze(e),
        e);
    function g(n) {
        return n.isNone();
    }
    function p(n) {
        return n();
    }
    function m(n) {
        return n;
    }
    function y(n, t, e) {
        const r = (function(n, t) {
            for (let e = 0; e < n.length; e++) {
                if (t(n[e])) return e;
            }
            return -1;
        })(t.parents, L);
        const i = r !== -1 ? t.parents.slice(0, r) : t.parents;
        const o = u.grep(i, N(n));
        return o.length > 0 && o[0].nodeName === e;
    }
    function O(n, t, e, r, i, o) {
        o.length > 0
            ? (function(e, n, t, r, i, o) {
                  e.ui.registry.addSplitButton(n, {
                      tooltip: t,
                      icon: i === 'OL' ? 'ordered-list' : 'unordered-list',
                      presets: 'listpreview',
                      columns: 3,
                      fetch(n) {
                          n(
                              u.map(o, function(n) {
                                  return {
                                      type: 'choiceitem',
                                      value: n === 'default' ? '' : n,
                                      icon: `list-${
                                          i === 'OL' ? 'num' : 'bull'
                                      }-${
                                          n === 'disc' || n === 'decimal'
                                              ? 'default'
                                              : n
                                      }`,
                                      text: (function(n) {
                                          return n
                                              .replace(/\-/g, ' ')
                                              .replace(/\b\w/g, function(n) {
                                                  return n.toUpperCase();
                                              });
                                      })(n),
                                  };
                              }),
                          );
                      },
                      onAction() {
                          return e.execCommand(r);
                      },
                      onItemAction(n, t) {
                          l(e, i, t);
                      },
                      select(t) {
                          return S(e)
                              .map(function(n) {
                                  return t === n;
                              })
                              .getOr(!1);
                      },
                      onSetup(t) {
                          function n(n) {
                              t.setActive(y(e, n, i));
                          }
                          return (
                              e.on('NodeChange', n),
                              function() {
                                  return e.off('NodeChange', n);
                              }
                          );
                      },
                  });
              })(n, t, e, r, i, o)
            : (function(e, n, t, r, i) {
                  e.ui.registry.addToggleButton(n, {
                      active: !1,
                      tooltip: t,
                      icon: i === 'OL' ? 'ordered-list' : 'unordered-list',
                      onSetup(t) {
                          function n(n) {
                              t.setActive(y(e, n, i));
                          }
                          return (
                              e.on('NodeChange', n),
                              function() {
                                  return e.off('NodeChange', n);
                              }
                          );
                      },
                      onAction() {
                          return e.execCommand(r);
                      },
                  });
              })(n, t, e, r, i);
    }
    var v = function(e) {
        function n() {
            return i;
        }
        function t(n) {
            return n(e);
        }
        const r = o(e);
        var i = {
            fold(n, t) {
                return t(e);
            },
            is(n) {
                return e === n;
            },
            isSome: a,
            isNone: f,
            getOr: r,
            getOrThunk: r,
            getOrDie: r,
            getOrNull: r,
            getOrUndefined: r,
            or: n,
            orThunk: n,
            map(n) {
                return v(n(e));
            },
            each(n) {
                n(e);
            },
            bind: t,
            exists: t,
            forall: t,
            filter(n) {
                return n(e) ? i : d;
            },
            toArray() {
                return [e];
            },
            toString() {
                return `some(${e})`;
            },
            equals(n) {
                return n.is(e);
            },
            equals_(n, t) {
                return n.fold(f, function(n) {
                    return t(e, n);
                });
            },
        };
        return i;
    };
    const h = function(n) {
        return n === null || n === undefined ? d : v(n);
    };
    var L = function(n) {
        return n && /^(TH|TD)$/.test(n.nodeName);
    };
    var N = function(t) {
        return function(n) {
            return (
                n &&
                /^(OL|UL|DL)$/.test(n.nodeName) &&
                (function(n, t) {
                    return n.$.contains(n.getBody(), t);
                })(t, n)
            );
        };
    };
    var S = function(n) {
        const t = n.dom.getParent(n.selection.getNode(), 'ol,ul');
        const e = n.dom.getStyle(t, 'listStyleType');
        return h(e);
    };
    const T = function(n) {
        O(n, 'numlist', 'Numbered list', 'InsertOrderedList', 'OL', c(n)),
            O(n, 'bullist', 'Bullet list', 'InsertUnorderedList', 'UL', s(n));
    };
    !(function b() {
        r.add('advlist', function(n) {
            let t;
            let e;
            let r;
            (e = 'lists'),
                (r = (t = n).settings.plugins ? t.settings.plugins : ''),
                u.inArray(r.split(/[ ,]/), e) !== -1 && (T(n), i(n));
        });
    })();
})();
