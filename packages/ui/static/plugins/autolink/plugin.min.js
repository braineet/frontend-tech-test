/**
 * Copyright (c) Tiny Technologies, Inc. All rights reserved.
 * Licensed under the LGPL or a commercial license.
 * For LGPL see License.txt in the project root for license information.
 * For commercial licenses see https://www.tiny.cloud/
 *
 * Version: 5.1.6 (2020-01-28)
 */
!(function() {
    function i(t, e) {
        if ((e < 0 && (e = 0), t.nodeType === 3)) {
            const n = t.data.length;
            n < e && (e = n);
        }
        return e;
    }
    function C(t, e, n) {
        e.nodeType !== 1 || e.hasChildNodes()
            ? t.setStart(e, i(e, n))
            : t.setStartBefore(e);
    }
    function m(t, e, n) {
        e.nodeType !== 1 || e.hasChildNodes()
            ? t.setEnd(e, i(e, n))
            : t.setEndAfter(e);
    }
    const t = tinymce.util.Tools.resolve('tinymce.PluginManager');
    const o = tinymce.util.Tools.resolve('tinymce.Env');
    const y = function(t) {
        return t.getParam(
            'autolink_pattern',
            /^(https?:\/\/|ssh:\/\/|ftp:\/\/|file:\/|www\.|(?:mailto:)?[A-Z0-9._%+\-]+@)(.+)$/i,
        );
    };
    const k = function(t) {
        return t.getParam('default_link_target', !1);
    };
    const r = function(t, e, n) {
        let i;
        let o;
        let r;
        let f;
        let a;
        let s;
        let d;
        let c;
        let l;
        let u;
        const g = y(t);
        const h = k(t);
        if (t.selection.getNode().tagName !== 'A') {
            if ((i = t.selection.getRng(!0).cloneRange()).startOffset < 5) {
                if (!(c = i.endContainer.previousSibling)) {
                    if (
                        !i.endContainer.firstChild ||
                        !i.endContainer.firstChild.nextSibling
                    )
                        return;
                    c = i.endContainer.firstChild.nextSibling;
                }
                if (((l = c.length), C(i, c, l), m(i, c, l), i.endOffset < 5))
                    return;
                (o = i.endOffset), (f = c);
            } else {
                if ((f = i.endContainer).nodeType !== 3 && f.firstChild) {
                    for (; f.nodeType !== 3 && f.firstChild; ) f = f.firstChild;
                    f.nodeType === 3 &&
                        (C(i, f, 0), m(i, f, f.nodeValue.length));
                }
                o = i.endOffset === 1 ? 2 : i.endOffset - 1 - e;
            }
            for (
                r = o;
                C(i, f, o >= 2 ? o - 2 : 0),
                    m(i, f, o >= 1 ? o - 1 : 0),
                    (o -= 1),
                    (u = i.toString()) !== ' ' &&
                        u !== '' &&
                        u.charCodeAt(0) !== 160 &&
                        o - 2 >= 0 &&
                        u !== n;

            );
            !(function(t, e) {
                return t === e || t === ' ' || t.charCodeAt(0) === 160;
            })(i.toString(), n)
                ? (i.startOffset === 0 ? C(i, f, 0) : C(i, f, o), m(i, f, r))
                : (C(i, f, o), m(i, f, r), (o += 1)),
                (s = i.toString()).charAt(s.length - 1) === '.' &&
                    m(i, f, r - 1),
                (d = (s = i.toString().trim()).match(g)) &&
                    (d[1] === 'www.'
                        ? (d[1] = 'http://www.')
                        : /@$/.test(d[1]) &&
                          !/^mailto:/.test(d[1]) &&
                          (d[1] = `mailto:${d[1]}`),
                    (a = t.selection.getBookmark()),
                    t.selection.setRng(i),
                    t.execCommand('createlink', !1, d[1] + d[2]),
                    !1 !== h &&
                        t.dom.setAttrib(t.selection.getNode(), 'target', h),
                    t.selection.moveToBookmark(a),
                    t.nodeChanged());
        }
    };
    const e = function(e) {
        let n;
        e.on('keydown', function(t) {
            if (t.keyCode === 13)
                return (function(t) {
                    r(t, -1, '');
                })(e);
        }),
            o.browser.isIE()
                ? e.on('focus', function() {
                      if (!n) {
                          n = !0;
                          try {
                              e.execCommand('AutoUrlDetect', !1, !0);
                          } catch (t) {}
                      }
                  })
                : (e.on('keypress', function(t) {
                      if (t.keyCode === 41)
                          return (function(t) {
                              r(t, -1, '(');
                          })(e);
                  }),
                  e.on('keyup', function(t) {
                      if (t.keyCode === 32)
                          return (function(t) {
                              r(t, 0, '');
                          })(e);
                  }));
    };
    !(function n() {
        t.add('autolink', function(t) {
            e(t);
        });
    })();
})();
