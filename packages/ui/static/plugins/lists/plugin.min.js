/**
 * Copyright (c) Tiny Technologies, Inc. All rights reserved.
 * Licensed under the LGPL or a commercial license.
 * For LGPL see License.txt in the project root for license information.
 * For commercial licenses see https://www.tiny.cloud/
 *
 * Version: 5.1.6 (2020-01-28)
 */
!(function(r) {
    function e() {}
    function l(e) {
        return function() {
            return e;
        };
    }
    function t(t) {
        return function() {
            for (var e = [], n = 0; n < arguments.length; n++)
                e[n] = arguments[n];
            return !t.apply(null, e);
        };
    }
    function n() {
        return a;
    }
    let o;
    const i = tinymce.util.Tools.resolve('tinymce.PluginManager');
    const u = l(!1);
    const s = l(!0);
    var a =
        ((o = {
            fold(e, n) {
                return e();
            },
            is: u,
            isSome: u,
            isNone: s,
            getOr: d,
            getOrThunk: f,
            getOrDie(e) {
                throw new Error(e || 'error: getOrDie called on none.');
            },
            getOrNull: l(null),
            getOrUndefined: l(undefined),
            or: d,
            orThunk: f,
            map: n,
            each: e,
            bind: n,
            exists: u,
            forall: s,
            filter: n,
            equals: c,
            equals_: c,
            toArray() {
                return [];
            },
            toString: l('none()'),
        }),
        Object.freeze && Object.freeze(o),
        o);
    function c(e) {
        return e.isNone();
    }
    function f(e) {
        return e();
    }
    function d(e) {
        return e;
    }
    function m(n) {
        return function(e) {
            return (
                (function(e) {
                    if (e === null) return 'null';
                    const n = typeof e;
                    return n == 'object' &&
                        (Array.prototype.isPrototypeOf(e) ||
                            (e.constructor && e.constructor.name === 'Array'))
                        ? 'array'
                        : n == 'object' &&
                          (String.prototype.isPrototypeOf(e) ||
                              (e.constructor &&
                                  e.constructor.name === 'String'))
                        ? 'string'
                        : n;
                })(e) === n
            );
        };
    }
    function g(e, n) {
        for (var t = e.length, r = new Array(t), o = 0; o < t; o++) {
            const i = e[o];
            r[o] = n(i, o);
        }
        return r;
    }
    function p(e, n) {
        for (let t = 0, r = e.length; t < r; t++) {
            n(e[t], t);
        }
    }
    function v(e, n) {
        for (var t = [], r = 0, o = e.length; r < o; r++) {
            const i = e[r];
            n(i, r) && t.push(i);
        }
        return t;
    }
    function h(e, n, t) {
        return (
            p(e, function(e) {
                t = n(t, e);
            }),
            t
        );
    }
    function N(e, n) {
        for (let t = 0, r = e.length; t < r; t++) {
            const o = e[t];
            if (n(o, t)) return $e.some(o);
        }
        return $e.none();
    }
    function y(e, n) {
        return (function(e) {
            for (var n = [], t = 0, r = e.length; t < r; ++t) {
                if (!We(e[t]))
                    throw new Error(
                        `Arr.flatten item ${t} was not an array, input: ${e}`,
                    );
                Qe.apply(n, e[t]);
            }
            return n;
        })(g(e, n));
    }
    function S(e) {
        return e.length === 0 ? $e.none() : $e.some(e[0]);
    }
    function O(e) {
        return e.length === 0 ? $e.none() : $e.some(e[e.length - 1]);
    }
    function C(e, n, t) {
        return (e.compareDocumentPosition(n) & t) != 0;
    }
    function b(e, n) {
        const t = (function(e, n) {
            for (let t = 0; t < e.length; t++) {
                const r = e[t];
                if (r.test(n)) return r;
            }
            return undefined;
        })(e, n);
        if (!t) return { major: 0, minor: 0 };
        function r(e) {
            return Number(n.replace(t, `$${e}`));
        }
        return Ze(r(1), r(2));
    }
    function L(e, n) {
        return function() {
            return n === e;
        };
    }
    function T(e, n) {
        return function() {
            return n === e;
        };
    }
    function D(e, n) {
        const t = String(n).toLowerCase();
        return N(e, function(e) {
            return e.search(t);
        });
    }
    function E(e, n) {
        return e.indexOf(n) !== -1;
    }
    function w(n) {
        return function(e) {
            return E(e, n);
        };
    }
    function k(e, n) {
        return e.dom() === n.dom();
    }
    function A(e, n, t) {
        return e.isSome() && n.isSome()
            ? $e.some(t(e.getOrDie(), n.getOrDie()))
            : $e.none();
    }
    function x(e) {
        return $e.from(e.dom().parentNode).map(Ln.fromDom);
    }
    function R(e) {
        return g(e.dom().childNodes, Ln.fromDom);
    }
    function I(e, n) {
        const t = e.dom().childNodes;
        return $e.from(t[n]).map(Ln.fromDom);
    }
    function _(e) {
        return I(e, 0);
    }
    function B(e) {
        return I(e, e.dom().childNodes.length - 1);
    }
    function P(n, t) {
        x(n).each(function(e) {
            e.dom().insertBefore(t.dom(), n.dom());
        });
    }
    function M(e, n) {
        e.dom().appendChild(n.dom());
    }
    function U(n, e) {
        p(e, function(e) {
            M(n, e);
        });
    }
    function F(e) {
        const n = e.dom();
        n.parentNode !== null && n.parentNode.removeChild(n);
    }
    function j(e, n, t) {
        return e.fire('ListMutation', { action: n, element: t });
    }
    function H(e, n) {
        return (function(e, n) {
            for (
                var t = n !== undefined && n !== null ? n : In, r = 0;
                r < e.length && t !== undefined && t !== null;
                ++r
            )
                t = t[e[r]];
            return t;
        })(e.split('.'), n);
    }
    function $(e) {
        return e && e.nodeName === 'BR';
    }
    function q(e) {
        const n = e.selection.getStart(!0);
        return e.dom.getParent(n, 'OL,UL,DL', Gn(e, n));
    }
    function W(e) {
        const n = e.selection.getSelectedBlocks();
        return Mn.grep(
            (function(t, e) {
                const n = Mn.map(e, function(e) {
                    const n = t.dom.getParent(e, 'li,dd,dt', Gn(t, e));
                    return n || e;
                });
                return Pn.unique(n);
            })(e, n),
            function(e) {
                return $n(e);
            },
        );
    }
    function V(e, n) {
        const t = e.dom.getParents(n, 'ol,ul', Gn(e, n));
        return O(t);
    }
    function z(e, n) {
        let t;
        let r;
        let o;
        let i;
        const u = e.dom;
        const s = e.schema.getBlockElements();
        const a = u.createFragment();
        if (
            (e.settings.forced_root_block && (o = e.settings.forced_root_block),
            o &&
                ((r = u.create(o)).tagName === e.settings.forced_root_block &&
                    u.setAttribs(r, e.settings.forced_root_block_attrs),
                Kn(n.firstChild, s) || a.appendChild(r)),
            n)
        )
            for (; (t = n.firstChild); ) {
                const c = t.nodeName;
                i ||
                    (c === 'SPAN' &&
                        t.getAttribute('data-mce-type') === 'bookmark') ||
                    (i = !0),
                    Kn(t, s)
                        ? (a.appendChild(t), (r = null))
                        : o
                        ? (r || ((r = u.create(o)), a.appendChild(r)),
                          r.appendChild(t))
                        : a.appendChild(t);
            }
        return (
            e.settings.forced_root_block
                ? i || r.appendChild(u.create('br', { 'data-mce-bogus': '1' }))
                : a.appendChild(u.create('br')),
            a
        );
    }
    function K(e) {
        return e.dom().nodeName.toLowerCase();
    }
    function X(e, n) {
        const t = e.dom();
        !(function(e, n) {
            for (let t = Rn(e), r = 0, o = t.length; r < o; r++) {
                const i = t[r];
                n(e[i], i);
            }
        })(n, function(e, n) {
            !(function(e, n, t) {
                if (!(qe(t) || Ve(t) || Ke(t)))
                    throw (r.console.error(
                        'Invalid call to Attr.set. Key ',
                        n,
                        ':: Value ',
                        t,
                        ':: Element ',
                        e,
                    ),
                    new Error('Attribute value was not simple'));
                e.setAttribute(n, `${t}`);
            })(t, n, e);
        });
    }
    function Q(e) {
        return h(
            e.dom().attributes,
            function(e, n) {
                return (e[n.name] = n.value), e;
            },
            {},
        );
    }
    function Y(e, n, t) {
        if (!qe(t))
            throw (r.console.error(
                'Invalid call to CSS.set. Property ',
                n,
                ':: Value ',
                t,
                ':: Element ',
                e,
            ),
            new Error(`CSS value must be a string: ${t}`));
        !(function(e) {
            return e.style !== undefined && ze(e.style.getPropertyValue);
        })(e) || e.style.setProperty(n, t);
    }
    function G(e) {
        return (function(e, n) {
            return Ln.fromDom(e.dom().cloneNode(n));
        })(e, !0);
    }
    function J(e, n) {
        const t = (function(e, n) {
            const t = Ln.fromTag(n);
            const r = Q(e);
            return X(t, r), t;
        })(e, n);
        P(e, t);
        const r = R(e);
        return U(t, r), F(e), t;
    }
    function Z(e, n) {
        M(e.item, n.list);
    }
    function ee(n, e, t) {
        const r = e.slice(0, t.depth);
        return (
            O(r).each(function(e) {
                !(function(e, n) {
                    M(e.list, n), (e.item = n);
                })(
                    e,
                    (function(e, n, t) {
                        const r = Ln.fromTag('li', e);
                        return X(r, n), U(r, t), r;
                    })(n, t.itemAttributes, t.content),
                ),
                    (function(e, n) {
                        K(e.list) !== n.listType &&
                            (e.list = J(e.list, n.listType)),
                            X(e.list, n.listAttributes);
                    })(e, t);
            }),
            r
        );
    }
    function ne(e, n, t) {
        const r = (function(e, n, t) {
            for (var r, o, i, u = [], s = 0; s < t; s++)
                u.push(
                    ((r = e),
                    (o = n.listType),
                    void 0,
                    (i = { list: Ln.fromTag(o, r), item: Ln.fromTag('li', r) }),
                    M(i.list, i.item),
                    i),
                );
            return u;
        })(e, t, t.depth - n.length);
        return (
            (function(e) {
                for (let n = 1; n < e.length; n++) Z(e[n - 1], e[n]);
            })(r),
            (function(e, n) {
                for (let t = 0; t < e.length - 1; t++)
                    (r = e[t].item),
                        (o = 'list-style-type'),
                        (i = 'none'),
                        void 0,
                        (u = r.dom()),
                        Y(u, o, i);
                let r;
                let o;
                let i;
                let u;
                O(e).each(function(e) {
                    X(e.list, n.listAttributes),
                        X(e.item, n.itemAttributes),
                        U(e.item, n.content);
                });
            })(r, t),
            (function(e, n) {
                A(O(e), S(n), Z);
            })(n, r),
            n.concat(r)
        );
    }
    function te(e) {
        return wn(e, 'OL,UL');
    }
    function re(e) {
        return _(e)
            .map(te)
            .getOr(!1);
    }
    function oe(e) {
        return e.depth > 0;
    }
    function ie(e) {
        return e.isSelected;
    }
    function ue(e) {
        const n = R(e);
        const t = (function(e) {
            return B(e)
                .map(te)
                .getOr(!1);
        })(e)
            ? n.slice(0, -1)
            : n;
        return g(t, G);
    }
    function se(t) {
        p(t, function(n, e) {
            (function(e, n) {
                for (let t = e[n].depth, r = n - 1; r >= 0; r--) {
                    if (e[r].depth === t) return $e.some(e[r]);
                    if (e[r].depth < t) break;
                }
                return $e.none();
            })(t, e).each(function(e) {
                !(function(e, n) {
                    (e.listType = n.listType),
                        (e.listAttributes = tt({}, n.listAttributes));
                })(n, e);
            });
        });
    }
    function ae(t, r, o, i) {
        return _(i)
            .filter(te)
            .fold(
                function() {
                    r.each(function(e) {
                        k(e.start, i) && o.set(!0);
                    });
                    const e = (function(n, t, r) {
                        return x(n)
                            .filter(et)
                            .map(function(e) {
                                return {
                                    depth: t,
                                    isSelected: r,
                                    content: ue(n),
                                    itemAttributes: Q(n),
                                    listAttributes: Q(e),
                                    listType: K(e),
                                };
                            });
                    })(i, t, o.get());
                    r.each(function(e) {
                        k(e.end, i) && o.set(!1);
                    });
                    const n = B(i)
                        .filter(te)
                        .map(function(e) {
                            return rt(t, r, o, e);
                        })
                        .getOr([]);
                    return e.toArray().concat(n);
                },
                function(e) {
                    return rt(t, r, o, e);
                },
            );
    }
    function ce(t, e) {
        return g(e, function(e) {
            const n = (function(e, n) {
                const t = (n || r.document).createDocumentFragment();
                return (
                    p(e, function(e) {
                        t.appendChild(e.dom());
                    }),
                    Ln.fromDom(t)
                );
            })(e.content);
            return Ln.fromDom(z(t, n.dom()));
        });
    }
    function fe(e, n) {
        return (
            se(n),
            (function(t, e) {
                const n = h(
                    e,
                    function(e, n) {
                        return n.depth > e.length ? ne(t, e, n) : ee(t, e, n);
                    },
                    [],
                );
                return S(n).map(function(e) {
                    return e.list;
                });
            })(e.contentDocument, n).toArray()
        );
    }
    function de(e) {
        const n = g(Zn.getSelectedListItems(e), Ln.fromDom);
        return A(
            N(n, t(re)),
            N(
                (function(e) {
                    const n = Xe.call(e, 0);
                    return n.reverse(), n;
                })(n),
                t(re),
            ),
            function(e, n) {
                return { start: e, end: n };
            },
        );
    }
    function le(t, e, r) {
        const n = (function(e, n) {
            const t = Ge(!1);
            return g(e, function(e) {
                return { sourceList: e, entries: rt(0, n, t, e) };
            });
        })(e, de(t));
        p(n, function(e) {
            !(function(e, n) {
                p(v(e, ie), function(e) {
                    return (function(e, n) {
                        switch (e) {
                            case 'Indent':
                                n.depth++;
                                break;
                            case 'Outdent':
                                n.depth--;
                                break;
                            case 'Flatten':
                                n.depth = 0;
                        }
                    })(n, e);
                });
            })(e.entries, r);
            const n = (function(n, e) {
                return y(
                    (function(e, n) {
                        if (e.length === 0) return [];
                        for (
                            var t = n(e[0]),
                                r = [],
                                o = [],
                                i = 0,
                                u = e.length;
                            i < u;
                            i++
                        ) {
                            const s = e[i];
                            const a = n(s);
                            a !== t && (r.push(o), (o = [])),
                                (t = a),
                                o.push(s);
                        }
                        return o.length !== 0 && r.push(o), r;
                    })(e, oe),
                    function(e) {
                        return S(e)
                            .map(oe)
                            .getOr(!1)
                            ? fe(n, e)
                            : ce(n, e);
                    },
                );
            })(t, e.entries);
            p(n, function(e) {
                j(t, r === 'Indent' ? 'IndentList' : 'OutdentList', e.dom());
            }),
                (function(n, e) {
                    p(e, function(e) {
                        P(n, e);
                    });
                })(e.sourceList, n),
                F(e.sourceList);
        });
    }
    function me(e) {
        wn(e, 'dt') && J(e, 'dd');
    }
    function ge(n, e, t) {
        p(
            t,
            e === 'Indent'
                ? me
                : function(e) {
                      return (function(n, t) {
                          wn(t, 'dd')
                              ? J(t, 'dt')
                              : wn(t, 'dt') &&
                                x(t).each(function(e) {
                                    return ut(n, e.dom(), t.dom());
                                });
                      })(n, e);
                  },
        );
    }
    function pe(e, n) {
        if (Un(e)) return { container: e, offset: n };
        const t = kn.getNode(e, n);
        return Un(t)
            ? {
                  container: t,
                  offset: n >= e.childNodes.length ? t.data.length : 0,
              }
            : t.previousSibling && Un(t.previousSibling)
            ? {
                  container: t.previousSibling,
                  offset: t.previousSibling.data.length,
              }
            : t.nextSibling && Un(t.nextSibling)
            ? { container: t.nextSibling, offset: 0 }
            : { container: e, offset: n };
    }
    function ve(e, n) {
        const t = g(Zn.getSelectedListRoots(e), Ln.fromDom);
        const r = g(Zn.getSelectedDlItems(e), Ln.fromDom);
        let o = !1;
        if (t.length || r.length) {
            const i = e.selection.getBookmark();
            le(e, t, n),
                ge(e, n, r),
                e.selection.moveToBookmark(i),
                e.selection.setRng(st(e.selection.getRng())),
                e.nodeChanged(),
                (o = !0);
        }
        return o;
    }
    function he(e) {
        return ve(e, 'Indent');
    }
    function Ne(e) {
        return ve(e, 'Outdent');
    }
    function ye(e) {
        return ve(e, 'Flatten');
    }
    function Se(e) {
        return /\btox\-/.test(e.className);
    }
    function Oe(e) {
        switch (e) {
            case 'UL':
                return 'ToggleUlList';
            case 'OL':
                return 'ToggleOlList';
            case 'DL':
                return 'ToggleDLList';
        }
    }
    function Ce(t, e) {
        Mn.each(e, function(e, n) {
            t.setAttribute(n, e);
        });
    }
    function be(e, n, t) {
        !(function(e, n, t) {
            const r = t['list-style-type'] ? t['list-style-type'] : null;
            e.setStyle(n, 'list-style-type', r);
        })(e, n, t),
            (function(e, n, t) {
                Ce(n, t['list-attributes']),
                    Mn.each(e.select('li', n), function(e) {
                        Ce(e, t['list-item-attributes']);
                    });
            })(e, n, t);
    }
    function Le(e, n, t, r) {
        let o;
        let i;
        for (
            o = n[t ? 'startContainer' : 'endContainer'],
                i = n[t ? 'startOffset' : 'endOffset'],
                o.nodeType === 1 &&
                    (o =
                        o.childNodes[Math.min(i, o.childNodes.length - 1)] ||
                        o),
                !t && Wn(o.nextSibling) && (o = o.nextSibling);
            o.parentNode !== r;

        ) {
            if (zn(e, o)) return o;
            if (/^(TD|TH)$/.test(o.parentNode.nodeName)) return o;
            o = o.parentNode;
        }
        return o;
    }
    function Te(r, o, i) {
        void 0 === i && (i = {});
        let e;
        const n = r.selection.getRng(!0);
        let u = 'LI';
        const t = Zn.getClosestListRootElm(r, r.selection.getStart(!0));
        const s = r.dom;
        s.getContentEditable(r.selection.getNode()) !== 'false' &&
            ((o = o.toUpperCase()) === 'DL' && (u = 'DT'),
            (e = ft(n)),
            Mn.each(
                (function(t, e, r) {
                    for (
                        var o,
                            i = [],
                            u = t.dom,
                            n = Le(t, e, !0, r),
                            s = Le(t, e, !1, r),
                            a = [],
                            c = n;
                        c && (a.push(c), c !== s);
                        c = c.nextSibling
                    );
                    return (
                        Mn.each(a, function(e) {
                            if (zn(t, e)) return i.push(e), void (o = null);
                            if (u.isBlock(e) || Wn(e))
                                return Wn(e) && u.remove(e), void (o = null);
                            const n = e.nextSibling;
                            at.isBookmarkNode(e) &&
                            (zn(t, n) || (!n && e.parentNode === r))
                                ? (o = null)
                                : (o ||
                                      ((o = u.create('p')),
                                      e.parentNode.insertBefore(o, e),
                                      i.push(o)),
                                  o.appendChild(e));
                        }),
                        i
                    );
                })(r, n, t),
                function(e) {
                    let n;
                    let t;
                    (t = e.previousSibling) &&
                    Fn(t) &&
                    t.nodeName === o &&
                    (function(e, n, t) {
                        const r = e.getStyle(n, 'list-style-type');
                        let o = t ? t['list-style-type'] : '';
                        return r === (o = o === null ? '' : o);
                    })(s, t, i)
                        ? ((n = t), (e = s.rename(e, u)), t.appendChild(e))
                        : ((n = s.create(o)),
                          e.parentNode.insertBefore(n, e),
                          n.appendChild(e),
                          (e = s.rename(e, u))),
                        (function(t, r, e) {
                            Mn.each(e, function(e) {
                                let n;
                                return t.setStyle(r, (((n = {})[e] = ''), n));
                            });
                        })(s, e, [
                            'margin',
                            'margin-right',
                            'margin-bottom',
                            'margin-left',
                            'margin-top',
                            'padding',
                            'padding-right',
                            'padding-bottom',
                            'padding-left',
                            'padding-top',
                        ]),
                        be(s, n, i),
                        lt(r.dom, n);
                },
            ),
            r.selection.setRng(dt(e)));
    }
    function De(e, n, t) {
        return (
            (function(e, n) {
                return e && n && Fn(e) && e.nodeName === n.nodeName;
            })(n, t) &&
            (function(e, n, t) {
                return (
                    e.getStyle(n, 'list-style-type', !0) ===
                    e.getStyle(t, 'list-style-type', !0)
                );
            })(e, n, t) &&
            (function(e, n) {
                return e.className === n.className;
            })(n, t)
        );
    }
    function Ee(n, e, t, r, o) {
        if (e.nodeName !== r || mt(o)) {
            const i = ft(n.selection.getRng(!0));
            Mn.each([e].concat(t), function(e) {
                !(function(e, n, t, r) {
                    if (n.nodeName !== t) {
                        const o = e.dom.rename(n, t);
                        be(e.dom, o, r), j(e, Oe(t), o);
                    } else be(e.dom, n, r), j(e, Oe(t), n);
                })(n, e, r, o);
            }),
                n.selection.setRng(dt(i));
        } else ye(n);
    }
    function we(e, n) {
        let t;
        const r = n.parentNode;
        r.nodeName === 'LI' &&
            r.firstChild === n &&
            ((t = r.previousSibling) && t.nodeName === 'LI'
                ? (t.appendChild(n), Qn(e, r) && pt.remove(r))
                : pt.setStyle(r, 'listStyleType', 'none')),
            Fn(r) &&
                (t = r.previousSibling) &&
                t.nodeName === 'LI' &&
                t.appendChild(n);
    }
    function ke(e, n, t, r) {
        let o = n.startContainer;
        const i = n.startOffset;
        if (Un(o) && (t ? i < o.data.length : i > 0)) return o;
        const u = e.schema.getNonEmptyElements();
        o.nodeType === 1 && (o = kn.getNode(o, i));
        const s = new An(o, r);
        for (t && Xn(e.dom, o) && s.next(); (o = s[t ? 'next' : 'prev2']()); ) {
            if (o.nodeName === 'LI' && !o.hasChildNodes()) return o;
            if (u[o.nodeName]) return o;
            if (Un(o) && o.data.length > 0) return o;
        }
    }
    function Ae(e, n) {
        const t = n.childNodes;
        return t.length === 1 && !Fn(t[0]) && e.isBlock(t[0]);
    }
    function xe(e, n, t) {
        let r;
        let o;
        if (
            ((o = Ae(e, t) ? t.firstChild : t),
            (function(e, n) {
                Ae(e, n) && e.remove(n.firstChild, !0);
            })(e, n),
            !Qn(e, n, !0))
        )
            for (; (r = n.firstChild); ) o.appendChild(r);
    }
    function Re(n, e, t) {
        let r;
        let o;
        const i = e.parentNode;
        if (Yn(n, e) && Yn(n, t)) {
            Fn(t.lastChild) && (o = t.lastChild),
                i === t.lastChild &&
                    Wn(i.previousSibling) &&
                    n.remove(i.previousSibling),
                (r = t.lastChild) && Wn(r) && e.hasChildNodes() && n.remove(r),
                Qn(n, t, !0) && n.$(t).empty(),
                xe(n, e, t),
                o && t.appendChild(o);
            const u = En(Ln.fromDom(t), Ln.fromDom(e))
                ? n.getParents(e, Fn, t)
                : [];
            n.remove(e),
                p(u, function(e) {
                    Qn(n, e) && e !== n.getRoot() && n.remove(e);
                });
        }
    }
    function Ie(e, n, t, r) {
        const o = e.dom;
        if (o.isEmpty(r))
            !(function(e, n, t) {
                e.dom.$(t).empty(),
                    Re(e.dom, n, t),
                    e.selection.setCursorLocation(t);
            })(e, t, r);
        else {
            const i = ft(n);
            Re(o, t, r), e.selection.setRng(dt(i));
        }
    }
    function _e(e, n) {
        const t = e.dom;
        const r = e.selection;
        const o = r.getStart();
        const i = Zn.getClosestListRootElm(e, o);
        const u = t.getParent(r.getStart(), 'LI', i);
        if (u) {
            const s = u.parentNode;
            if (s === e.getBody() && Qn(t, s)) return !0;
            const a = st(r.getRng());
            const c = t.getParent(ke(e, a, n, i), 'LI', i);
            if (c && c !== u)
                return (
                    e.undoManager.transact(function() {
                        n
                            ? Ie(e, a, c, u)
                            : Vn(u)
                            ? Ne(e)
                            : (function(e, n, t, r) {
                                  const o = ft(n);
                                  Re(e.dom, t, r);
                                  const i = dt(o);
                                  e.selection.setRng(i);
                              })(e, a, u, c);
                    }),
                    !0
                );
            if (!c && !n && a.startOffset === 0 && a.endOffset === 0)
                return (
                    e.undoManager.transact(function() {
                        ye(e);
                    }),
                    !0
                );
        }
        return !1;
    }
    function Be(e, n) {
        return (
            _e(e, n) ||
            (function(e, n) {
                const t = e.dom;
                const r = e.selection.getStart();
                const o = Zn.getClosestListRootElm(e, r);
                const i = t.getParent(r, t.isBlock, o);
                if (i && t.isEmpty(i)) {
                    const u = st(e.selection.getRng());
                    const s = t.getParent(ke(e, u, n, o), 'LI', o);
                    if (s)
                        return (
                            e.undoManager.transact(function() {
                                !(function(e, n, t) {
                                    const r = e.getParent(
                                        n.parentNode,
                                        e.isBlock,
                                        t,
                                    );
                                    e.remove(n),
                                        r && e.isEmpty(r) && e.remove(r);
                                })(t, i, o),
                                    gt.mergeWithAdjacentLists(t, s.parentNode),
                                    e.selection.select(s, !0),
                                    e.selection.collapse(n);
                            }),
                            !0
                        );
                }
                return !1;
            })(e, n)
        );
    }
    function Pe(e, n) {
        return e.selection.isCollapsed()
            ? Be(e, n)
            : (function(e) {
                  const n = e.selection.getStart();
                  const t = Zn.getClosestListRootElm(e, n);
                  return (
                      !!(
                          e.dom.getParent(n, 'LI,DT,DD', t) ||
                          Zn.getSelectedListItems(e).length > 0
                      ) &&
                      (e.undoManager.transact(function() {
                          e.execCommand('Delete'), vt(e.dom, e.getBody());
                      }),
                      !0)
                  );
              })(e);
    }
    function Me(n, t) {
        return function() {
            const e = n.dom.getParent(n.selection.getStart(), 'UL,OL,DL');
            return e && e.nodeName === t;
        };
    }
    function Ue(n, i) {
        return function(o) {
            function e(e) {
                const n = (function(e, n) {
                    for (let t = 0; t < e.length; t++) {
                        if (n(e[t])) return t;
                    }
                    return -1;
                })(e.parents, qn);
                const t = n !== -1 ? e.parents.slice(0, n) : e.parents;
                const r = Mn.grep(t, Fn);
                o.setActive(r.length > 0 && r[0].nodeName === i && !Se(r[0]));
            }
            return (
                n.on('NodeChange', e),
                function() {
                    return n.off('NodeChange', e);
                }
            );
        };
    }
    let Fe;
    let je;
    var He = function(t) {
        function e() {
            return o;
        }
        function n(e) {
            return e(t);
        }
        const r = l(t);
        var o = {
            fold(e, n) {
                return n(t);
            },
            is(e) {
                return t === e;
            },
            isSome: s,
            isNone: u,
            getOr: r,
            getOrThunk: r,
            getOrDie: r,
            getOrNull: r,
            getOrUndefined: r,
            or: e,
            orThunk: e,
            map(e) {
                return He(e(t));
            },
            each(e) {
                e(t);
            },
            bind: n,
            exists: n,
            forall: n,
            filter(e) {
                return e(t) ? o : a;
            },
            toArray() {
                return [t];
            },
            toString() {
                return `some(${t})`;
            },
            equals(e) {
                return e.is(t);
            },
            equals_(e, n) {
                return e.fold(u, function(e) {
                    return n(t, e);
                });
            },
        };
        return o;
    };
    var $e = {
        some: He,
        none: n,
        from(e) {
            return e === null || e === undefined ? a : He(e);
        },
    };
    var qe = m('string');
    var We = m('array');
    var Ve = m('boolean');
    var ze = m('function');
    var Ke = m('number');
    var Xe = Array.prototype.slice;
    var Qe = Array.prototype.push;
    const Ye =
        (ze(Array.from) && Array.from,
        function(e, n) {
            return C(e, n, r.Node.DOCUMENT_POSITION_CONTAINED_BY);
        });
    var Ge = function(e) {
        function n() {
            return t;
        }
        var t = e;
        return {
            get: n,
            set(e) {
                t = e;
            },
            clone() {
                return Ge(n());
            },
        };
    };
    const Je = function() {
        return Ze(0, 0);
    };
    var Ze = function(e, n) {
        return { major: e, minor: n };
    };
    const en = {
        nu: Ze,
        detect(e, n) {
            const t = String(n).toLowerCase();
            return e.length === 0 ? Je() : b(e, t);
        },
        unknown: Je,
    };
    const nn = 'Edge';
    const tn = 'Chrome';
    const rn = 'Opera';
    const on = 'Firefox';
    const un = 'Safari';
    const sn = function(e) {
        const n = e.current;
        return {
            current: n,
            version: e.version,
            isEdge: L(nn, n),
            isChrome: L(tn, n),
            isIE: L('IE', n),
            isOpera: L(rn, n),
            isFirefox: L(on, n),
            isSafari: L(un, n),
        };
    };
    const an = {
        unknown() {
            return sn({ current: undefined, version: en.unknown() });
        },
        nu: sn,
        edge: l(nn),
        chrome: l(tn),
        ie: l('IE'),
        opera: l(rn),
        firefox: l(on),
        safari: l(un),
    };
    const cn = 'Windows';
    const fn = 'Android';
    const dn = 'Solaris';
    const ln = 'FreeBSD';
    const mn = 'ChromeOS';
    const gn = function(e) {
        const n = e.current;
        return {
            current: n,
            version: e.version,
            isWindows: T(cn, n),
            isiOS: T('iOS', n),
            isAndroid: T(fn, n),
            isOSX: T('OSX', n),
            isLinux: T('Linux', n),
            isSolaris: T(dn, n),
            isFreeBSD: T(ln, n),
            isChromeOS: T(mn, n),
        };
    };
    const pn = {
        unknown() {
            return gn({ current: undefined, version: en.unknown() });
        },
        nu: gn,
        windows: l(cn),
        ios: l('iOS'),
        android: l(fn),
        linux: l('Linux'),
        osx: l('OSX'),
        solaris: l(dn),
        freebsd: l(ln),
        chromeos: l(mn),
    };
    const vn = function(e, t) {
        return D(e, t).map(function(e) {
            const n = en.detect(e.versionRegexes, t);
            return { current: e.name, version: n };
        });
    };
    const hn = function(e, t) {
        return D(e, t).map(function(e) {
            const n = en.detect(e.versionRegexes, t);
            return { current: e.name, version: n };
        });
    };
    const Nn = /.*?version\/\ ?([0-9]+)\.([0-9]+).*/;
    const yn = [
        {
            name: 'Edge',
            versionRegexes: [/.*?edge\/ ?([0-9]+)\.([0-9]+)$/],
            search(e) {
                return (
                    E(e, 'edge/') &&
                    E(e, 'chrome') &&
                    E(e, 'safari') &&
                    E(e, 'applewebkit')
                );
            },
        },
        {
            name: 'Chrome',
            versionRegexes: [/.*?chrome\/([0-9]+)\.([0-9]+).*/, Nn],
            search(e) {
                return E(e, 'chrome') && !E(e, 'chromeframe');
            },
        },
        {
            name: 'IE',
            versionRegexes: [
                /.*?msie\ ?([0-9]+)\.([0-9]+).*/,
                /.*?rv:([0-9]+)\.([0-9]+).*/,
            ],
            search(e) {
                return E(e, 'msie') || E(e, 'trident');
            },
        },
        {
            name: 'Opera',
            versionRegexes: [Nn, /.*?opera\/([0-9]+)\.([0-9]+).*/],
            search: w('opera'),
        },
        {
            name: 'Firefox',
            versionRegexes: [/.*?firefox\/\ ?([0-9]+)\.([0-9]+).*/],
            search: w('firefox'),
        },
        {
            name: 'Safari',
            versionRegexes: [Nn, /.*?cpu os ([0-9]+)_([0-9]+).*/],
            search(e) {
                return (
                    (E(e, 'safari') || E(e, 'mobile/')) && E(e, 'applewebkit')
                );
            },
        },
    ];
    const Sn = [
        {
            name: 'Windows',
            search: w('win'),
            versionRegexes: [/.*?windows\ nt\ ?([0-9]+)\.([0-9]+).*/],
        },
        {
            name: 'iOS',
            search(e) {
                return E(e, 'iphone') || E(e, 'ipad');
            },
            versionRegexes: [
                /.*?version\/\ ?([0-9]+)\.([0-9]+).*/,
                /.*cpu os ([0-9]+)_([0-9]+).*/,
                /.*cpu iphone os ([0-9]+)_([0-9]+).*/,
            ],
        },
        {
            name: 'Android',
            search: w('android'),
            versionRegexes: [/.*?android\ ?([0-9]+)\.([0-9]+).*/],
        },
        {
            name: 'OSX',
            search: w('mac os x'),
            versionRegexes: [/.*?mac\ os\ x\ ?([0-9]+)_([0-9]+).*/],
        },
        { name: 'Linux', search: w('linux'), versionRegexes: [] },
        { name: 'Solaris', search: w('sunos'), versionRegexes: [] },
        { name: 'FreeBSD', search: w('freebsd'), versionRegexes: [] },
        {
            name: 'ChromeOS',
            search: w('cros'),
            versionRegexes: [/.*?chrome\/([0-9]+)\.([0-9]+).*/],
        },
    ];
    const On = { browsers: l(yn), oses: l(Sn) };
    const Cn = Ge(
        (function(e, n) {
            const t = On.browsers();
            const r = On.oses();
            const o = vn(t, e).fold(an.unknown, an.nu);
            const i = hn(r, e).fold(pn.unknown, pn.nu);
            return {
                browser: o,
                os: i,
                deviceType: (function(e, n, t, r) {
                    const o = e.isiOS() && !0 === /ipad/i.test(t);
                    const i = e.isiOS() && !o;
                    const u = e.isiOS() || e.isAndroid();
                    const s = u || r('(pointer:coarse)');
                    const a = o || (!i && u && r('(min-device-width:768px)'));
                    const c = i || (u && !a);
                    const f =
                        n.isSafari() && e.isiOS() && !1 === /safari/i.test(t);
                    const d = !c && !a && !f;
                    return {
                        isiPad: l(o),
                        isiPhone: l(i),
                        isTablet: l(a),
                        isPhone: l(c),
                        isTouch: l(s),
                        isAndroid: e.isAndroid,
                        isiOS: e.isiOS,
                        isWebView: l(f),
                        isDesktop: l(d),
                    };
                })(i, o, e, n),
            };
        })(r.navigator.userAgent, function(e) {
            return r.window.matchMedia(e).matches;
        }),
    );
    const bn = function(e) {
        if (e === null || e === undefined)
            throw new Error('Node cannot be null or undefined');
        return { dom: l(e) };
    };
    var Ln = {
        fromHtml(e, n) {
            const t = (n || r.document).createElement('div');
            if (
                ((t.innerHTML = e),
                !t.hasChildNodes() || t.childNodes.length > 1)
            )
                throw (r.console.error(
                    'HTML does not have a single root node',
                    e,
                ),
                new Error('HTML must have a single root node'));
            return bn(t.childNodes[0]);
        },
        fromTag(e, n) {
            const t = (n || r.document).createElement(e);
            return bn(t);
        },
        fromText(e, n) {
            const t = (n || r.document).createTextNode(e);
            return bn(t);
        },
        fromDom: bn,
        fromPoint(e, n, t) {
            const r = e.dom();
            return $e.from(r.elementFromPoint(n, t)).map(bn);
        },
    };
    const Tn =
        (r.Node.ATTRIBUTE_NODE,
        r.Node.CDATA_SECTION_NODE,
        r.Node.COMMENT_NODE,
        r.Node.DOCUMENT_NODE,
        r.Node.DOCUMENT_TYPE_NODE,
        r.Node.DOCUMENT_FRAGMENT_NODE,
        r.Node.ELEMENT_NODE);
    const Dn =
        (r.Node.TEXT_NODE,
        r.Node.PROCESSING_INSTRUCTION_NODE,
        r.Node.ENTITY_REFERENCE_NODE,
        r.Node.ENTITY_NODE,
        r.Node.NOTATION_NODE,
        Tn);
    var En = Cn.get().browser.isIE()
        ? function(e, n) {
              return Ye(e.dom(), n.dom());
          }
        : function(e, n) {
              const t = e.dom();
              const r = n.dom();
              return t !== r && t.contains(r);
          };
    var wn = function(e, n) {
        const t = e.dom();
        if (t.nodeType !== Dn) return !1;
        const r = t;
        if (r.matches !== undefined) return r.matches(n);
        if (r.msMatchesSelector !== undefined) return r.msMatchesSelector(n);
        if (r.webkitMatchesSelector !== undefined)
            return r.webkitMatchesSelector(n);
        if (r.mozMatchesSelector !== undefined) return r.mozMatchesSelector(n);
        throw new Error('Browser lacks native selectors');
    };
    var kn = tinymce.util.Tools.resolve('tinymce.dom.RangeUtils');
    var An = tinymce.util.Tools.resolve('tinymce.dom.TreeWalker');
    const xn = tinymce.util.Tools.resolve('tinymce.util.VK');
    var Rn = Object.keys;
    var In =
        ((function() {
            for (let e = [], n = 0; n < arguments.length; n++)
                e[n] = arguments[n];
        })('element', 'offset'),
        typeof r.window !== 'undefined'
            ? r.window
            : Function('return this;')());
    const _n = function(e, n) {
        const t = (function(e, n) {
            return H(e, n);
        })(e, n);
        if (t === undefined || t === null)
            throw new Error(`${e} not available on this browser`);
        return t;
    };
    const Bn = function(e) {
        return (function(e) {
            return _n('HTMLElement', e);
        })(H('ownerDocument.defaultView', e)).prototype.isPrototypeOf(e);
    };
    var Pn = tinymce.util.Tools.resolve('tinymce.dom.DomQuery');
    var Mn = tinymce.util.Tools.resolve('tinymce.util.Tools');
    var Un = function(e) {
        return e && e.nodeType === 3;
    };
    var Fn = function(e) {
        return e && /^(OL|UL|DL)$/.test(e.nodeName);
    };
    const jn = function(e) {
        return e && /^(OL|UL)$/.test(e.nodeName);
    };
    const Hn = function(e) {
        return e && /^(DT|DD)$/.test(e.nodeName);
    };
    var $n = function(e) {
        return e && /^(LI|DT|DD)$/.test(e.nodeName);
    };
    var qn = function(e) {
        return e && /^(TH|TD)$/.test(e.nodeName);
    };
    var Wn = $;
    var Vn = function(e) {
        return e.parentNode.firstChild === e;
    };
    var zn = function(e, n) {
        return n && !!e.schema.getTextBlockElements()[n.nodeName];
    };
    var Kn = function(e, n) {
        return e && e.nodeName in n;
    };
    var Xn = function(e, n) {
        return !!$(n) && !(!e.isBlock(n.nextSibling) || $(n.previousSibling));
    };
    var Qn = function(e, n, t) {
        const r = e.isEmpty(n);
        return (
            !(t && e.select('span[data-mce-type=bookmark]', n).length > 0) && r
        );
    };
    var Yn = function(e, n) {
        return e.isChildOf(n, e.getRoot());
    };
    var Gn = function(e, n) {
        const t = e.dom.getParents(n, 'TD,TH');
        return t.length > 0 ? t[0] : e.getBody();
    };
    const Jn = function(n, e) {
        const t = g(e, function(e) {
            return V(n, e).getOr(e);
        });
        return Pn.unique(t);
    };
    var Zn = {
        isList(e) {
            const n = q(e);
            return Bn(n);
        },
        getParentList: q,
        getSelectedSubLists(e) {
            const n = q(e);
            const t = e.selection.getSelectedBlocks();
            return (function(e, n) {
                return e && n.length === 1 && n[0] === e;
            })(n, t)
                ? (function(e) {
                      return Mn.grep(e.querySelectorAll('ol,ul,dl'), function(
                          e,
                      ) {
                          return Fn(e);
                      });
                  })(n)
                : Mn.grep(t, function(e) {
                      return Fn(e) && n !== e;
                  });
        },
        getSelectedListItems: W,
        getClosestListRootElm: Gn,
        getSelectedDlItems(e) {
            return v(W(e), Hn);
        },
        getSelectedListRoots(e) {
            const n = (function(e) {
                const n = V(e, e.selection.getStart());
                const t = v(e.selection.getSelectedBlocks(), jn);
                return n.toArray().concat(t);
            })(e);
            return Jn(e, n);
        },
    };
    var et =
        ((Fe = Tn),
        function(e) {
            return (
                (function(e) {
                    return e.dom().nodeType;
                })(e) === Fe
            );
        });
    const nt = Object.prototype.hasOwnProperty;
    var tt =
        ((je = function(e, n) {
            return n;
        }),
        function() {
            for (var e = new Array(arguments.length), n = 0; n < e.length; n++)
                e[n] = arguments[n];
            if (e.length === 0) throw new Error("Can't merge zero objects");
            for (var t = {}, r = 0; r < e.length; r++) {
                const o = e[r];
                for (const i in o) nt.call(o, i) && (t[i] = je(t[i], o[i]));
            }
            return t;
        });
    var rt = function(n, t, r, e) {
        return y(R(e), function(e) {
            return (te(e) ? rt : ae)(n + 1, t, r, e);
        });
    };
    const ot = tinymce.util.Tools.resolve('tinymce.dom.DOMUtils');
    const it = ot.DOM;
    var ut = function(e, n, t) {
        let r;
        let o;
        let i;
        let u;
        let s;
        let a;
        for (
            i = it.select('span[data-mce-type="bookmark"]', n),
                s = z(e, t),
                (r = it.createRng()).setStartAfter(t),
                r.setEndAfter(n),
                u = (o = r.extractContents()).firstChild;
            u;
            u = u.firstChild
        )
            if (u.nodeName === 'LI' && e.dom.isEmpty(u)) {
                it.remove(u);
                break;
            }
        e.dom.isEmpty(o) || it.insertAfter(o, n),
            it.insertAfter(s, n),
            Qn(e.dom, t.parentNode) &&
                ((a = t.parentNode),
                Mn.each(i, function(e) {
                    a.parentNode.insertBefore(e, t.parentNode);
                }),
                it.remove(a)),
            it.remove(t),
            Qn(e.dom, n) && it.remove(n);
    };
    var st = function(e) {
        const n = e.cloneRange();
        const t = pe(e.startContainer, e.startOffset);
        n.setStart(t.container, t.offset);
        const r = pe(e.endContainer, e.endOffset);
        return n.setEnd(r.container, r.offset), n;
    };
    var at = tinymce.util.Tools.resolve('tinymce.dom.BookmarkManager');
    const ct = ot.DOM;
    var ft = function(o) {
        function e(e) {
            let n;
            let t;
            let r;
            (t = o[e ? 'startContainer' : 'endContainer']),
                (r = o[e ? 'startOffset' : 'endOffset']),
                t.nodeType === 1 &&
                    ((n = ct.create('span', {
                        'data-mce-type': 'bookmark',
                    })),
                    t.hasChildNodes()
                        ? ((r = Math.min(r, t.childNodes.length - 1)),
                          e
                              ? t.insertBefore(n, t.childNodes[r])
                              : ct.insertAfter(n, t.childNodes[r]))
                        : t.appendChild(n),
                    (t = n),
                    (r = 0)),
                (i[e ? 'startContainer' : 'endContainer'] = t),
                (i[e ? 'startOffset' : 'endOffset'] = r);
        }
        var i = {};
        return e(!0), o.collapsed || e(), i;
    };
    var dt = function(o) {
        function e(e) {
            let n;
            let t;
            let r;
            (n = r = o[e ? 'startContainer' : 'endContainer']),
                (t = o[e ? 'startOffset' : 'endOffset']),
                n &&
                    (n.nodeType === 1 &&
                        ((t = (function(e) {
                            for (let n = e.parentNode.firstChild, t = 0; n; ) {
                                if (n === e) return t;
                                (n.nodeType === 1 &&
                                    n.getAttribute('data-mce-type') ===
                                        'bookmark') ||
                                    t++,
                                    (n = n.nextSibling);
                            }
                            return -1;
                        })(n)),
                        (n = n.parentNode),
                        ct.remove(r),
                        !n.hasChildNodes() &&
                            ct.isBlock(n) &&
                            n.appendChild(ct.create('br'))),
                    (o[e ? 'startContainer' : 'endContainer'] = n),
                    (o[e ? 'startOffset' : 'endOffset'] = t));
        }
        e(!0), e();
        const n = ct.createRng();
        return (
            n.setStart(o.startContainer, o.startOffset),
            o.endContainer && n.setEnd(o.endContainer, o.endOffset),
            st(n)
        );
    };
    var lt = function(e, n) {
        let t;
        let r;
        if (((t = n.nextSibling), De(e, n, t))) {
            for (; (r = t.firstChild); ) n.appendChild(r);
            e.remove(t);
        }
        if (((t = n.previousSibling), De(e, n, t))) {
            for (; (r = t.lastChild); ) n.insertBefore(r, n.firstChild);
            e.remove(t);
        }
    };
    var mt = function(e) {
        return 'list-style-type' in e;
    };
    var gt = {
        toggleList(e, n, t) {
            const r = Zn.getParentList(e);
            const o = Zn.getSelectedSubLists(e);
            (t = t || {}),
                r && o.length > 0
                    ? Ee(e, r, o, n, t)
                    : (function(e, n, t, r) {
                          if (n !== e.getBody())
                              if (n)
                                  if (n.nodeName !== t || mt(r) || Se(n)) {
                                      const o = ft(e.selection.getRng(!0));
                                      be(e.dom, n, r);
                                      const i = e.dom.rename(n, t);
                                      lt(e.dom, i),
                                          e.selection.setRng(dt(o)),
                                          j(e, Oe(t), i);
                                  } else ye(e);
                              else Te(e, t, r), j(e, Oe(t), n);
                      })(e, r, n, t);
        },
        mergeWithAdjacentLists: lt,
    };
    var pt = ot.DOM;
    var vt = function(n, e) {
        Mn.each(Mn.grep(n.select('ol,ul', e)), function(e) {
            we(n, e);
        });
    };
    const ht = function(n) {
        n.on('keydown', function(e) {
            e.keyCode === xn.BACKSPACE
                ? Pe(n, !1) && e.preventDefault()
                : e.keyCode === xn.DELETE && Pe(n, !0) && e.preventDefault();
        });
    };
    const Nt = Pe;
    const yt = function(n) {
        return {
            backspaceDelete(e) {
                Nt(n, e);
            },
        };
    };
    const St = function(t) {
        t.on('BeforeExecCommand', function(e) {
            const n = e.command.toLowerCase();
            n === 'indent' ? he(t) : n === 'outdent' && Ne(t);
        }),
            t.addCommand('InsertUnorderedList', function(e, n) {
                gt.toggleList(t, 'UL', n);
            }),
            t.addCommand('InsertOrderedList', function(e, n) {
                gt.toggleList(t, 'OL', n);
            }),
            t.addCommand('InsertDefinitionList', function(e, n) {
                gt.toggleList(t, 'DL', n);
            }),
            t.addCommand('RemoveList', function() {
                ye(t);
            }),
            t.addQueryStateHandler('InsertUnorderedList', Me(t, 'UL')),
            t.addQueryStateHandler('InsertOrderedList', Me(t, 'OL')),
            t.addQueryStateHandler('InsertDefinitionList', Me(t, 'DL'));
    };
    const Ot = function(e) {
        return e.getParam('lists_indent_on_tab', !0);
    };
    const Ct = function(e) {
        Ot(e) &&
            (function(n) {
                n.on('keydown', function(e) {
                    e.keyCode !== xn.TAB ||
                        xn.metaKeyPressed(e) ||
                        n.undoManager.transact(function() {
                            (e.shiftKey ? Ne(n) : he(n)) && e.preventDefault();
                        });
                });
            })(e),
            ht(e);
    };
    const bt = function(n) {
        function e(e) {
            return function() {
                return n.execCommand(e);
            };
        }
        let t;
        let r;
        let o;
        (r = 'advlist'),
            (o = (t = n).settings.plugins ? t.settings.plugins : ''),
            Mn.inArray(o.split(/[ ,]/), r) === -1 &&
                (n.ui.registry.addToggleButton('numlist', {
                    icon: 'ordered-list',
                    active: !1,
                    tooltip: 'Numbered list',
                    onAction: e('InsertOrderedList'),
                    onSetup: Ue(n, 'OL'),
                }),
                n.ui.registry.addToggleButton('bullist', {
                    icon: 'unordered-list',
                    active: !1,
                    tooltip: 'Bullet list',
                    onAction: e('InsertUnorderedList'),
                    onSetup: Ue(n, 'UL'),
                }));
    };
    !(function Lt() {
        i.add('lists', function(e) {
            return Ct(e), bt(e), St(e), yt(e);
        });
    })();
})(window);
